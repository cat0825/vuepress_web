{"content":"<p>在 C++ 中，函数定义的位置对代码的清晰度和组织有影响，但并没有绝对的限制。你可以根据需要选择函数定义的位置：</p>\n<p>• <strong>在</strong> main() <strong>之前定义</strong>：这样更直接，函数定义立即可用，不需要声明。</p>\n<p>• <strong>在</strong> main() <strong>之后定义</strong>：需要在 main() 之前声明函数，适合将 main() 与其他逻辑分开，特别是在函数较多时。</p>\n<p><strong>代码示例：</strong></p>\n<ol>\n<li><strong>在</strong> main() <strong>之前定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之前定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>在</strong> main() <strong>之后定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 声明 greet 函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之后定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>函数声明</li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数声明：返回类型为 int，接受两个 int 类型的参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">The sum is: </span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数定义：返回类型为 int，接受两个 int 类型的参数，并给出参数名称</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意返回类型和接受类型在函数声明中</strong></p>\n","env":{"base":"/","filePath":"/Users/qianyuhe/Desktop/my-project/docs/notes_bak/cpp-primer-plus/函数声明.md","filePathRelative":"notes_bak/cpp-primer-plus/函数声明.md","frontmatter":{"dg-publish":true,"dg-permalink":"/cpp/函数声明","permalink":"/cpp/函数声明/","dgPassFrontmatter":true,"noteIcon":null,"created":"2024-12-28T07:04:10.000Z","updated":"2025-01-01T14:38:55.000Z","title":"函数声明","createTime":"2025/05/13 17:33:52"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>在 C++ 中，函数定义的位置对代码的清晰度和组织有影响，但并没有绝对的限制。你可以根据需要选择函数定义的位置：</p>\n<p>• <strong>在</strong> main() <strong>之前定义</strong>：这样更直接，函数定义立即可用，不需要声明。</p>\n<p>• <strong>在</strong> main() <strong>之后定义</strong>：需要在 main() 之前声明函数，适合将 main() 与其他逻辑分开，特别是在函数较多时。</p>\n<p><strong>代码示例：</strong></p>\n<ol>\n<li><strong>在</strong> main() <strong>之前定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之前定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>在</strong> main() <strong>之后定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 声明 greet 函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之后定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>函数声明</li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数声明：返回类型为 int，接受两个 int 类型的参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">The sum is: </span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数定义：返回类型为 int，接受两个 int 类型的参数，并给出参数名称</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意返回类型和接受类型在函数声明中</strong></p>\n</template>","contentStripped":"<p>在 C++ 中，函数定义的位置对代码的清晰度和组织有影响，但并没有绝对的限制。你可以根据需要选择函数定义的位置：</p>\n<p>• <strong>在</strong> main() <strong>之前定义</strong>：这样更直接，函数定义立即可用，不需要声明。</p>\n<p>• <strong>在</strong> main() <strong>之后定义</strong>：需要在 main() 之前声明函数，适合将 main() 与其他逻辑分开，特别是在函数较多时。</p>\n<p><strong>代码示例：</strong></p>\n<ol>\n<li><strong>在</strong> main() <strong>之前定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之前定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>在</strong> main() <strong>之后定义</strong></li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 声明 greet 函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">    greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 在 main 函数之后定义</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> greet</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>函数声明</li>\n</ol>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数声明：返回类型为 int，接受两个 int 类型的参数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">3</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 4</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 调用函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">The sum is: </span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> result </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">// 函数定义：返回类型为 int，接受两个 int 类型的参数，并给出参数名称</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> add</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> a</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> a </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">+</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>注意返回类型和接受类型在函数声明中</strong></p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"  \n\n在 C++ 中，函数定义的位置对代码的清晰度和组织有影响，但并没有绝对的限制。你可以根据需要选择函数定义的位置：\n\n• **在** main() **之前定义**：这样更直接，函数定义立即可用，不需要声明。\n\n• **在** main() **之后定义**：需要在 main() 之前声明函数，适合将 main() 与其他逻辑分开，特别是在函数较多时。\n\n  \n\n**代码示例：**\n\n1. **在** main() **之前定义**\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// 在 main 函数之前定义\nvoid greet() {\n    cout << \"Hello, World!\" << endl;\n}\n\nint main() {\n    greet();\n    return 0;\n}\n```\n\n2. **在** main() **之后定义**\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// 声明 greet 函数\nvoid greet();\n\nint main() {\n    greet();\n    return 0;\n}\n\n// 在 main 函数之后定义\nvoid greet() {\n    cout << \"Hello, World!\" << endl;\n}\n```\n\n3. 函数声明\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// 函数声明：返回类型为 int，接受两个 int 类型的参数\nint add(int, int);\n\nint main() {\n    int result = add(3, 4);  // 调用函数\n    cout << \"The sum is: \" << result << endl;\n    return 0;\n}\n\n// 函数定义：返回类型为 int，接受两个 int 类型的参数，并给出参数名称\nint add(int a, int b) {\n    return a + b;\n}\n```\n\n**注意返回类型和接受类型在函数声明中**","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[]}}
