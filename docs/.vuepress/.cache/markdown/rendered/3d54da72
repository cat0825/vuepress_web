{"content":"<p>[[c++ primer plus/using和namespace|using和namespace]]</p>\n<p>using std<VPIcon name=\"cout\" class=\"和 using namespace std 都是用来简化 C++ 中命名空间的使用的方式，它们的目的都是让你在代码中避免每次都写 std\" /> 前缀。不过，它们的使用场景和影响不同，下面分别介绍它们的适用场景。</p>\n<h1 id=\"_1-using-std-cout\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-using-std-cout\"><span><strong>1. using std::cout</strong></span></a></h1>\n<p>using std<VPIcon name=\"cout\" class=\"是一个局部的引入方式，只引入了 std\" />cout，这样你在代码中就可以直接使用 cout 而不需要写 std::cout。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>局部引入</strong>：只引入一个或几个特定的标准库成员，避免污染命名空间。适合在小范围的代码中使用，特别是当你只需要少数几个标准库元素时。</p>\n<p>• <strong>避免命名冲突</strong>：如果你的代码中可能有其他库使用相同名字的标识符（如另一个库中也有 cout），那么使用 using std::cout 可以避免全局引入命名空间，减少冲突的机会。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 只引入 cout</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里不用写 std::cout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"_2-using-namespace-std\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-using-namespace-std\"><span><strong>2. using namespace std</strong></span></a></h1>\n<p>using namespace std 是将整个 std 命名空间中的所有内容都引入当前作用域。你不需要在每次使用标准库的成员时加上 std:: 前缀。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>小型程序和学习阶段</strong>：在学习 C++ 或编写简单的代码时，使用 using namespace std 可以减少代码的复杂性，让代码看起来更简洁。</p>\n<p>• <strong>短小的代码段</strong>：如果你的程序很小，使用 using namespace std 可能不会导致命名冲突，代码也更简洁易懂。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 引入整个 std 命名空间</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里可以直接用 cout 和 endl</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>• <strong>使用</strong> using std<VPIcon name=\"cout**（或其他特定元素）**：通常建议在需要时，只引入你需要的特定标准库元素。例如，如果你只需要\" class=\"cout 和 endl，那么可以分别写 using std\" />cout; 和 using std::endl;，而不是引入整个 std 命名空间。</p>\n<p>• <strong>避免全局使用</strong> using namespace std：在头文件中或大型项目中，避免使用 using namespace std。这样能防止命名冲突，并保持命名空间清晰。</p>\n","env":{"base":"/","filePath":"/Users/qianyuhe/Desktop/my-project/docs/notes_bak/c++ primer plus/局部和全局的命名空间引入.md","filePathRelative":"notes_bak/c++ primer plus/局部和全局的命名空间引入.md","frontmatter":{"dg-publish":true,"dg-permalink":"/cpp/命名空间","permalink":"/cpp/命名空间/","dgPassFrontmatter":true,"noteIcon":null,"created":"2024-12-28T07:13:18.000Z","updated":"2025-01-01T14:39:03.000Z","title":"局部和全局的命名空间引入","createTime":"2025/05/13 17:33:52"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>[[c++ primer plus/using和namespace|using和namespace]]</p>\n<p>using std<VPIcon name=\"cout\" class=\"和 using namespace std 都是用来简化 C++ 中命名空间的使用的方式，它们的目的都是让你在代码中避免每次都写 std\" /> 前缀。不过，它们的使用场景和影响不同，下面分别介绍它们的适用场景。</p>\n<h1 id=\"_1-using-std-cout\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-using-std-cout\"><span><strong>1. using std::cout</strong></span></a></h1>\n<p>using std<VPIcon name=\"cout\" class=\"是一个局部的引入方式，只引入了 std\" />cout，这样你在代码中就可以直接使用 cout 而不需要写 std::cout。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>局部引入</strong>：只引入一个或几个特定的标准库成员，避免污染命名空间。适合在小范围的代码中使用，特别是当你只需要少数几个标准库元素时。</p>\n<p>• <strong>避免命名冲突</strong>：如果你的代码中可能有其他库使用相同名字的标识符（如另一个库中也有 cout），那么使用 using std::cout 可以避免全局引入命名空间，减少冲突的机会。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 只引入 cout</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里不用写 std::cout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"_2-using-namespace-std\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-using-namespace-std\"><span><strong>2. using namespace std</strong></span></a></h1>\n<p>using namespace std 是将整个 std 命名空间中的所有内容都引入当前作用域。你不需要在每次使用标准库的成员时加上 std:: 前缀。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>小型程序和学习阶段</strong>：在学习 C++ 或编写简单的代码时，使用 using namespace std 可以减少代码的复杂性，让代码看起来更简洁。</p>\n<p>• <strong>短小的代码段</strong>：如果你的程序很小，使用 using namespace std 可能不会导致命名冲突，代码也更简洁易懂。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 引入整个 std 命名空间</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里可以直接用 cout 和 endl</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>• <strong>使用</strong> using std<VPIcon name=\"cout**（或其他特定元素）**：通常建议在需要时，只引入你需要的特定标准库元素。例如，如果你只需要\" class=\"cout 和 endl，那么可以分别写 using std\" />cout; 和 using std::endl;，而不是引入整个 std 命名空间。</p>\n<p>• <strong>避免全局使用</strong> using namespace std：在头文件中或大型项目中，避免使用 using namespace std。这样能防止命名冲突，并保持命名空间清晰。</p>\n</template>","contentStripped":"<p>[[c++ primer plus/using和namespace|using和namespace]]</p>\n<p>using std<VPIcon name=\"cout\" class=\"和 using namespace std 都是用来简化 C++ 中命名空间的使用的方式，它们的目的都是让你在代码中避免每次都写 std\" /> 前缀。不过，它们的使用场景和影响不同，下面分别介绍它们的适用场景。</p>\n<h1 id=\"_1-using-std-cout\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-using-std-cout\"><span><strong>1. using std::cout</strong></span></a></h1>\n<p>using std<VPIcon name=\"cout\" class=\"是一个局部的引入方式，只引入了 std\" />cout，这样你在代码中就可以直接使用 cout 而不需要写 std::cout。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>局部引入</strong>：只引入一个或几个特定的标准库成员，避免污染命名空间。适合在小范围的代码中使用，特别是当你只需要少数几个标准库元素时。</p>\n<p>• <strong>避免命名冲突</strong>：如果你的代码中可能有其他库使用相同名字的标识符（如另一个库中也有 cout），那么使用 using std::cout 可以避免全局引入命名空间，减少冲突的机会。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">cout</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 只引入 cout</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里不用写 std::cout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"_2-using-namespace-std\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-using-namespace-std\"><span><strong>2. using namespace std</strong></span></a></h1>\n<p>using namespace std 是将整个 std 命名空间中的所有内容都引入当前作用域。你不需要在每次使用标准库的成员时加上 std:: 前缀。</p>\n<p><strong>适用场景：</strong></p>\n<p>• <strong>小型程序和学习阶段</strong>：在学习 C++ 或编写简单的代码时，使用 using namespace std 可以减少代码的复杂性，让代码看起来更简洁。</p>\n<p>• <strong>短小的代码段</strong>：如果你的程序很小，使用 using namespace std 可能不会导致命名冲突，代码也更简洁易懂。</p>\n<div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">#</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">include</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> &#x3C;</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">iostream</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">using</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> namespace</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> std</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 引入整个 std 命名空间</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    cout </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">&#x3C;&#x3C;</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">Hello, World!</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> endl</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">  // 这里可以直接用 cout 和 endl</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">    return</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>• <strong>使用</strong> using std<VPIcon name=\"cout**（或其他特定元素）**：通常建议在需要时，只引入你需要的特定标准库元素。例如，如果你只需要\" class=\"cout 和 endl，那么可以分别写 using std\" />cout; 和 using std::endl;，而不是引入整个 std 命名空间。</p>\n<p>• <strong>避免全局使用</strong> using namespace std：在头文件中或大型项目中，避免使用 using namespace std。这样能防止命名冲突，并保持命名空间清晰。</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"[[c++ primer plus/using和namespace\\|using和namespace]]\n\nusing std::cout 和 using namespace std 都是用来简化 C++ 中命名空间的使用的方式，它们的目的都是让你在代码中避免每次都写 std:: 前缀。不过，它们的使用场景和影响不同，下面分别介绍它们的适用场景。\n\n\n\n# **1. using std::cout**\n  \n\nusing std::cout 是一个局部的引入方式，只引入了 std::cout，这样你在代码中就可以直接使用 cout 而不需要写 std::cout。\n\n  \n\n**适用场景：**\n\n• **局部引入**：只引入一个或几个特定的标准库成员，避免污染命名空间。适合在小范围的代码中使用，特别是当你只需要少数几个标准库元素时。\n\n• **避免命名冲突**：如果你的代码中可能有其他库使用相同名字的标识符（如另一个库中也有 cout），那么使用 using std::cout 可以避免全局引入命名空间，减少冲突的机会。\n\n```cpp\n#include <iostream>\n\nusing std::cout;  // 只引入 cout\n\nint main() {\n    cout << \"Hello, World!\" << std::endl;  // 这里不用写 std::cout\n    return 0;\n}\n```\n\n\n\n# **2. using namespace std**\n  \n\nusing namespace std 是将整个 std 命名空间中的所有内容都引入当前作用域。你不需要在每次使用标准库的成员时加上 std:: 前缀。\n\n  \n\n**适用场景：**\n\n• **小型程序和学习阶段**：在学习 C++ 或编写简单的代码时，使用 using namespace std 可以减少代码的复杂性，让代码看起来更简洁。\n\n• **短小的代码段**：如果你的程序很小，使用 using namespace std 可能不会导致命名冲突，代码也更简洁易懂。\n\n```cpp\n#include <iostream>\n\nusing namespace std;  // 引入整个 std 命名空间\n\nint main() {\n    cout << \"Hello, World!\" << endl;  // 这里可以直接用 cout 和 endl\n    return 0;\n}\n```\n\n• **使用** using std::cout**（或其他特定元素）**：通常建议在需要时，只引入你需要的特定标准库元素。例如，如果你只需要 cout 和 endl，那么可以分别写 using std::cout; 和 using std::endl;，而不是引入整个 std 命名空间。\n\n• **避免全局使用** using namespace std：在头文件中或大型项目中，避免使用 using namespace std。这样能防止命名冲突，并保持命名空间清晰。","excerpt":"","includedFiles":[],"tasklistId":0,"title":"1. using std::cout","headers":[]}}
